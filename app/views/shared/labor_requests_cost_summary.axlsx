# @return [String] a "safe" cell name for uses with the Axlsx gem by removing 
#    spaces and underscores from the given name. 
def axls_safe_cell_name(name)
  name.delete(' ').delete('_')
end

# Sets the name of the given row/col to the given name
# Note: The name must be unique in the workbook, not just the worksheet.
# Also, Excel cannot seem to handle names should not contain underscores ("_"),
# spaces (" "), or dashes ("-").
def name_cell_in_row(row, col, cell_name)
  cell_location = "#{row.worksheet.name}!#{row.cells[col].r_abs}"
  row.worksheet.workbook.add_defined_name cell_location, name: axls_safe_cell_name(cell_name)
end


# Style definitions
def define_styles(wb)
  # Define style components
  title_font_size = 16
  header_font_size = 14
  summary_description_font_size = 14
  summary_result_font_size = 12

  title_font = { sz: title_font_size, b: true }
  header_font = { sz: header_font_size, b: true }
  summary_description_font = { sz: summary_description_font_size, b: true, i: true }
  summary_result_font = { sz: summary_result_font_size, b: true }

  currency_format = { format_code: "$#,##0.00" }

  top_border = { border: { style: :thick, color: '000000', name: :top, edges: [:top] } };
  bottom_border = { border: { style: :thick, color: '000000', name: :bottom, edges: [:bottom] } };

  # Style definitions
  styles = Hash.new
  styles['currency'] = wb.styles.add_style(currency_format)
  styles['extra_title'] = wb.styles.add_style(title_font)
  styles['title'] = wb.styles.add_style title_font.merge({ bg_color: "FFFF00" })
  styles['header'] = wb.styles.add_style header_font.merge(bg_color: "D9D9D9")
  styles['header_bottom_border'] = wb.styles.add_style header_font.merge(bg_color: "D9D9D9").merge(bottom_border)
  styles['summary_description'] = wb.styles.add_style summary_description_font
  styles['summary_result'] = wb.styles.add_style summary_result_font.merge(currency_format).merge(bg_color: "D9D9D9")
  styles['summary_result_top_border'] = wb.styles.add_style summary_result_font.merge(currency_format).merge(bg_color: "D9D9D9").merge(top_border)

  return styles
end

def construct_division_worksheet(wb, styles, record_set, division)
  # Division Worksheet Construction
  wb.add_worksheet(name: axls_safe_cell_name(division)) do |sheet|
    row_num = 1
    data = record_set[:summary_data]
    current_fiscal_year = record_set[:current_fiscal_year]

    sheet.add_row [ division, "Divisional Summary of L & A Requests - #{current_fiscal_year}" ],
                  style: [styles['title'], styles['extra_title']],
                  widths: [:auto, :ignore]
    sheet.merge_cells "B#{row_num}:D#{row_num}"
    row_num += 1

    sheet.add_row ['', ''],
                  style: [styles['title'], nil],
                  widths: [:auto, :ignore]
    row_num += 1

    sheet.add_row [ 'Dept Name', "C1's", 'Hourly Faculty', 'Students', 'Total', 'Grant, Gift, Other Support' ],
                  style: styles['header_bottom_border']
    row_num += 1

    data_start_row = row_num
    data.each do |record|
      if ( record[:division] == division )
        row = sheet.add_row [ record[:department], record[:c1], record[:hourly_faculty], record[:students], "=SUM(B#{row_num}:D#{row_num})", record[:other_support] ],
                      style: [nil, styles['currency'], styles['currency'], styles['currency'], styles['currency'], styles['currency']],
                      widths: :auto
        row_num += 1
      end
    end
    data_end_row = row_num - 1

    row = sheet.add_row [ "Total L & A Requested for #{current_fiscal_year}",
                    "=SUM(B#{data_start_row}:B#{data_end_row})",
                    "=SUM(C#{data_start_row}:C#{data_end_row})",
                    "=SUM(D#{data_start_row}:D#{data_end_row})",
                    "=SUM(E#{data_start_row}:E#{data_end_row})",
                    "=SUM(F#{data_start_row}:F#{data_end_row})"],
                  style: [styles['summary_description'],
                          styles['summary_result_top_border'],
                          styles['summary_result_top_border'],
                          styles['summary_result_top_border'],
                          styles['summary_result_top_border'],
                          styles['summary_result']],
                  widths: :auto
    # Cell names must be unique in workbook. Can't use "_" to separate
    # words, because it turns the next letter into uppercase.
    name_cell_in_row(row, 1, division + 'c1totals')
    name_cell_in_row(row, 2, division + 'hourlyfacultytotals')
    name_cell_in_row(row, 3, division + 'studentstotals')
    name_cell_in_row(row, 4, division + 'totaltotals')
    name_cell_in_row(row, 5, division + 'othersupporttotals')
    row_num += 1
  end
end

def construct_summary_worksheet(wb, styles, record_set)
  # Summary Worksheet Construction
  wb.insert_worksheet(0, name:'Summary_L_and_A') do |sheet|
    row_num = 1
    data = record_set[:summary_data]
    current_fiscal_year = record_set[:current_fiscal_year]

    sheet.add_row [ 'Consolidated Libraries', "Summary of L & A Requests - #{current_fiscal_year}" ],
                  style: [styles['title'], styles['extra_title']],
                  widths: [:auto, :ignore]
    sheet.merge_cells "B#{row_num}:D#{row_num}"
    row_num += 1

    sheet.add_row ['', ''],
                  style: [styles['title'], nil],
                  widths: [:auto, :ignore]
    row_num += 1

    sheet.add_row ['', '', '', '', 'Less:', ''],
                  style: styles['header'],
                  widths: :auto
    row_num += 1

    sheet.add_row [ 'Div Name', "C1's", 'Hourly Faculty', 'Students', 'Other Support', "Net #{current_fiscal_year} Request" ],
                  style: styles['header_bottom_border']
    row_num += 1

    data_start_row = row_num
    divisions = Division.all
    divisions.each do |div|
      div_code = div.code.downcase
      sheet.add_row [ div.name, 
                      "=#{axls_safe_cell_name(div_code + 'c1totals')}",
                      "=#{axls_safe_cell_name(div_code + 'hourlyfacultytotals')}",
                      "=#{axls_safe_cell_name(div_code + 'studentstotals')}",
                      "=#{axls_safe_cell_name(div_code + 'othersupporttotals')}",
                      "=SUM(B#{row_num}:D#{row_num}) - E#{row_num}"],
                      style: [nil, styles['currency'], styles['currency'], styles['currency'], styles['currency'], styles['currency']],
                      widths: :auto
        row_num += 1
    end
    data_end_row = row_num - 1

    row = sheet.add_row [ "Total L & A Requested for #{current_fiscal_year}",
                    "=SUM(B#{data_start_row}:B#{data_end_row})",
                    "=SUM(C#{data_start_row}:C#{data_end_row})",
                    "=SUM(D#{data_start_row}:D#{data_end_row})",
                    "=SUM(E#{data_start_row}:E#{data_end_row})",
                    "=SUM(F#{data_start_row}:F#{data_end_row})"],
                  style: [styles['summary_description'],
                          styles['summary_result_top_border'],
                          styles['summary_result_top_border'],
                          styles['summary_result_top_border'],
                          styles['summary_result_top_border'],
                          styles['summary_result']],
                  widths: :auto
    name_cell_in_row(row, 5, 'summarynetfyrequest')
    row_num += 1
  end
end

worksheets = klass.respond_to?(:worksheets) ? klass.worksheets : [ klass.to_s ]

wb = xlsx_package.workbook

styles = define_styles(wb)

divisions = Division.all
divisions.each do |div|
  construct_division_worksheet(wb, styles, record_set, div.code)
end

construct_summary_worksheet(wb, styles, record_set)